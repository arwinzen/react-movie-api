{"version":3,"sources":["components/MovieCard/moviecard.module.css","components/MovieCard/moviecard.js","types.js","containers/Home/home.js","actions/index.js","containers/Details/details.js","App.js","reportWebVitals.js","reducers/fetchMovieDetailsReducer.js","reducers/fetchMovieReducer.js","reducers/index.js","store/configureStore.js","index.js"],"names":["module","exports","MovieCard","this","props","title","poster","year","type","id","className","classes","card_holder","to","src","alt","img_holder","details_holder","React","Component","FETCH_MOVIE","FETCH_MOVIE_SUCCESS","FETCH_MOVIE_FAIL","FETCH_MOVIE_DETAILS","FETCH_MOVIE_DETAILS_SUCCESS","FETCH_MOVIE_DETAILS_FAIL","Home","state","movieList","movieData","prevProps","isLoading","setState","data","Search","inputVal","_inputEl","value","onFetchMovie","placeholder","ref","a","onClick","movieSubmit","map","list","Title","Year","Type","Poster","imdbID","mapDispatchToProps","dispatch","payload","axios","get","then","res","console","log","status","Response","alert","Error","catch","error","response","connect","movie","Details","urlSplit","window","location","href","split","length","movieId","movieDetailsData","onFetchMovieDetails","Director","Actors","Plot","Runtime","movieDetails","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","fetchMovieDetailsReducer","action","undefined","fetchMovieReducer","combineReducers","persistConfig","key","version","storage","persistedReducer","persistReducer","rootReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","basename","process","loading","document","getElementById"],"mappings":"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","file":"static/js/main.ba090c8a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card_holder\":\"moviecard_card_holder__3iik3\",\"img_holder\":\"moviecard_img_holder__1fwbk\",\"details_holder\":\"moviecard_details_holder__3CfKS\"};","import React from 'react';\r\nimport classes from './moviecard.module.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass MovieCard extends React.Component {\r\n    render(){\r\n        const {title, poster, year, type, id} = this.props;\r\n        return (\r\n            <Link className={classes.card_holder} to={`details/${id}`}>\r\n                <img src={poster} alt=\"\" className={classes.img_holder}/>\r\n                <div className={classes.details_holder}>\r\n                    {/* {console.log(this.props)} */}\r\n                    <h3>{title}</h3>\r\n                    <p>{year}</p>\r\n                    <p>{type}</p>\r\n                </div>\r\n            </Link>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieCard;","export const FETCH_MOVIE = 'FETCH_MOVIE';\r\nexport const FETCH_MOVIE_SUCCESS = 'FETCH_MOVIE_SUCCESS';\r\nexport const FETCH_MOVIE_FAIL = 'FETCH_MOVIE_FAIL';\r\n\r\nexport const FETCH_MOVIE_DETAILS = 'FETCH_MOVIE_DETAILS';\r\nexport const FETCH_MOVIE_DETAILS_SUCCESS = 'FETCH_MOVIE_DETAILS_SUCCESS';\r\nexport const FETCH_MOVIE_DETAILS_FAIL = 'FETCH_MOVIE_DETAILS_FAIL';","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport classes from './home.module.css';\r\nimport MovieCard from '../../components/MovieCard/moviecard';\r\nimport { fetchMovie } from '../../actions';\r\n\r\nclass Home extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            movieList: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { movieData } = this.props;\r\n        // if(movieData){\r\n        //     this.setState({ movieList: movieData.data.Search });\r\n        // }\r\n    }\r\n    \r\n    componentDidUpdate(prevProps) {\r\n        const {movieData} = this.props;\r\n        if(prevProps.movieData.isLoading && !movieData.isLoading){\r\n            this.setState({ movieList: movieData.data.Search });\r\n            // this.props.onFetchMovie(movieData.data.Search);\r\n        }\r\n    }\r\n\r\n    movieSubmit(){\r\n        let inputVal = this._inputEl.value;\r\n        if(inputVal !== ''){\r\n            this.props.onFetchMovie(inputVal);\r\n            this._inputEl.value = '';\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <header>\r\n                    <input type=\"text\" placeholder=\"Movie Name\" ref={(a) => (this._inputEl = a)} />\r\n                    <button onClick={() => this.movieSubmit()}>Search</button>\r\n                </header>\r\n\r\n                <div>\r\n                    {\r\n                        this.state.movieList.map(list => (\r\n                            <MovieCard \r\n                              title = {list.Title}\r\n                              year = {list.Year}\r\n                              type = {list.Type}\r\n                              poster = {list.Poster}\r\n                              id = {list.imdbID}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    movieData: state.movie,\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    onFetchMovie: fetchMovie,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Home);","import \r\n{ FETCH_MOVIE,\r\n  FETCH_MOVIE_FAIL,\r\n  FETCH_MOVIE_SUCCESS, \r\n  FETCH_MOVIE_DETAILS, \r\n  FETCH_MOVIE_DETAILS_FAIL, \r\n  FETCH_MOVIE_DETAILS_SUCCESS } \r\nfrom \"../types\"\r\nimport axios from \"axios\";\r\n\r\nexport const fetchMovie = (data) => (dispatch) => {\r\n    dispatch({\r\n        type: FETCH_MOVIE,\r\n        payload: data,\r\n    })\r\n\r\n    try {\r\n        axios.get(`https://www.omdbapi.com/?apikey=3571e05b&s=${data}&page=1`)\r\n            .then((res) => {\r\n                console.log('res: ', res);\r\n                if (res.status === 200 && res.data.Response === 'True') {\r\n                    dispatch({\r\n                        type: FETCH_MOVIE_SUCCESS,\r\n                        payload: res.data\r\n                    })\r\n                } else {\r\n                    alert(res.data.Error)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log('axios error message: ', error.response.data.Error)\r\n                dispatch({\r\n                    type: FETCH_MOVIE_FAIL,\r\n                    error: error.response.data.Error,\r\n                })\r\n            });\r\n\r\n    } catch(error) {\r\n        console.log('fetch error message: ', error);\r\n        dispatch({\r\n            type: FETCH_MOVIE_FAIL,\r\n            error: error,\r\n        })\r\n    }\r\n}\r\n\r\nexport const fetchMovieDetails = (data) => (dispatch) => {\r\n    dispatch({\r\n        type: FETCH_MOVIE_DETAILS,\r\n    })\r\n\r\n    try {\r\n        axios.get(`https://www.omdbapi.com/?apikey=3571e05b&i=${data}`)\r\n          .then((res) => {\r\n            if(res.status === 200){\r\n                dispatch({\r\n                    type: FETCH_MOVIE_DETAILS_SUCCESS,\r\n                    payload: res.data\r\n                })\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log('axios error message: ', error.response.data.Error)\r\n            dispatch({\r\n                type: FETCH_MOVIE_FAIL,\r\n                error: error.response.data.Error,\r\n            })\r\n          })\r\n\r\n    } catch(error) {\r\n        console.log('error 2: ', error)\r\n        dispatch({\r\n            type: FETCH_MOVIE_DETAILS_FAIL,\r\n            error: error.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchMovieDetails } from '../../actions';\r\n\r\nclass Details extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const urlParam = window.location.href;\r\n        const urlSplit = urlParam.split(\"/\");\r\n        const id = urlSplit[urlSplit.length - 1];\r\n        console.log(id);\r\n        this.state = {\r\n            movieId : id,\r\n            data: {},\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const {movieDetailsData} = this.props;\r\n\r\n        if(prevProps.movieDetailsData.isLoading && !movieDetailsData.isLoading) {\r\n            this.setState({ data: movieDetailsData.data });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onFetchMovieDetails(this.state.movieId);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                {console.log(this.state.data)}\r\n                <h1>{this.state.data.Title}</h1>\r\n                <img src={this.state.data.Poster} alt=\"\" />\r\n                <p>Director: {this.state.data.Director}</p>\r\n                <p>Actors: {this.state.data.Actors}</p>\r\n                <p>Plot: {this.state.data.Plot}</p>\r\n                <p><small>Duration: {this.state.data.Runtime}</small></p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    movieDetailsData: state.movieDetails,\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    // self declare\r\n    onFetchMovieDetails: fetchMovieDetails\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Details);","import './App.css';\nimport { Routes, Route } from 'react-router-dom';\nimport Home from './containers/Home/home';\nimport Details from './containers/Details/details';\n\n\nfunction App() {\n  return (\n    <div >\n      <Routes>\n        <Route path=\"/details/:id\" element={<Details />} />\n        <Route path=\"/\" element={<Home />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n    FETCH_MOVIE_DETAILS,\r\n    FETCH_MOVIE_DETAILS_SUCCESS,\r\n    FETCH_MOVIE_DETAILS_FAIL\r\n} from '../types';\r\n\r\nconst defaultState = () => ({\r\n    isLoading: false,\r\n    data: {},\r\n    error: null\r\n})\r\n\r\nconst fetchMovieDetailsReducer = (state, action) => {\r\n    if(state === undefined) {\r\n        return defaultState();\r\n    }\r\n\r\n    switch(action.type){\r\n        case FETCH_MOVIE_DETAILS:\r\n            return {\r\n                isLoading: true,\r\n                data: {},\r\n                error: null,\r\n            }\r\n        case FETCH_MOVIE_DETAILS_SUCCESS:\r\n            return {\r\n                isLoading: false,\r\n                data: action.payload,\r\n                error: null,\r\n            }\r\n        case FETCH_MOVIE_DETAILS_FAIL:\r\n            return {\r\n                isLoading: false,\r\n                data: {},\r\n                error: action.error,\r\n            }\r\n        default: \r\n        return state\r\n    }\r\n}\r\n\r\nexport default fetchMovieDetailsReducer;","import { FETCH_MOVIE, FETCH_MOVIE_FAIL, FETCH_MOVIE_SUCCESS } from \"../types\";\r\nconst defaultState = () => ({\r\n    isLoading: false,\r\n    data: {},\r\n    error: null\r\n})\r\n\r\nconst fetchMovieReducer = (state, action) => {\r\n    if(state === undefined) {\r\n        return defaultState();\r\n    }\r\n\r\n    switch(action.type){\r\n        case FETCH_MOVIE:\r\n            return {\r\n                isLoading: true,\r\n                data: {},\r\n                error: null,\r\n            }\r\n        case FETCH_MOVIE_SUCCESS:\r\n            return {\r\n                isLoading: false,\r\n                data: action.payload,\r\n                error: null,\r\n            }\r\n        case FETCH_MOVIE_FAIL:\r\n            return {\r\n                isLoading: false,\r\n                data: {},\r\n                error: action.error,\r\n            }\r\n        default: \r\n        return state\r\n    }\r\n}\r\n\r\nexport default fetchMovieReducer;","import { combineReducers } from 'redux';\r\nimport fetchMovieDetailsReducer from './fetchMovieDetailsReducer';\r\nimport fetchMovieReducer from './fetchMovieReducer'\r\n\r\nexport default combineReducers({\r\n    movie: fetchMovieReducer,\r\n    movieDetails: fetchMovieDetailsReducer\r\n})","import { configureStore } from '@reduxjs/toolkit';\r\n// import countReducer from '../reducers/countReducer';\r\n// import todoReducer from '../reducers/todoReducer';\r\nimport {\r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n  } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport rootReducer from '../reducers/index';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    version: 1,\r\n    storage,\r\n  }\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n    reducer: persistedReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n      getDefaultMiddleware({\r\n        serializableCheck: {\r\n          ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n      }),\r\n  });\r\n  \r\nlet persistor = persistStore(store);\r\n\r\nexport { store, persistor };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter } from 'react-router-dom';\n\nimport { Provider } from 'react-redux';\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./store/configureStore\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter basename={process.env.PUBLIC_URL} loading={null} persistor={persistor} >\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}